/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */



/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.22'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}








task groovy << {}
println "Hello World!"

class JavaGreater{
    public static void sayHello(){
        System.out.println("Hello JAVA!");
    }
}
JavaGreater.sayHello();

def foo = 6.5
println "foo has value: $foo"
println(5+6)

def doubleIt(n){
    n*2
}

def a =10
println(doubleIt(a))
def noArgs(){
    println "No Args"
}

def oneArg(x){
    println("One Args")
}

def twoArg(x,y){
    println("Two Args")
}


twoArg 10, 20

oneArg 22

noArgs()




//Closures


def abc = "Amelione"

def closure = {
    println "Hello From a closure"
    println "The value of abc is $abc"
}

closure()

def bar = closure;
bar()



def doubleItClosureWay = {x -> x*2}

println doubleItClosureWay(20)

def applyDoubleItThreeTimes(function, arg){
    function(function(function(arg)))
}

println(applyDoubleItThreeTimes(doubleItClosureWay,50))


//Lists


def myList = ["ant","maven","gradle"]
def printItem = {item -> println "List Item: $item"}

myList.each(printItem)

myList.each{println "Item: $it"}


//Classes in groovy


class GroovyClass{
    String greeting = "Default Greeting"
    def printGreeting(){
        println this.getGreeting()
    }
}


def object = new GroovyClass()
object.printGreeting()
object.setGreeting("No longer default greeting")
object.printGreeting()


//back to the big deal, closures!!!


def greetingClosure = {
    greeting = "Setting the greeting from a closure"
    printGreeting()
}

greetingClosure.delegate = object

greetingClosure()

///Tasks configuration
project.task("firstTask")
task("secondTask")
task thirdTask

thirdTask.description = "A tiny bit of documentation"
thirdTask.group = "Defining a new group just because I can"

thirdTask.doLast{println "Do this part of thirdTask"}
thirdTask.doLast{println "Do this again part of thirdTask"}
thirdTask.doFirst{println "This will run first"}
thirdTask.leftShift{println "This will be run last"}
thirdTask << {println "Again, add to the end of the list"}

task fourthTask << { println "Another task in production"}
fourthTask.description = "Add a tiny of of documentation for task 4 as well"

task fifthTask{
    description "Task Number 5"
    group "Just because I can"

    doLast{
        println "Noit much, but it all starts with a hello wolrd!"
    }
}

*/
//Tasks Dependencies and Ordering
task putOnSocks{
    doLast{
        println "Putting on Socks"
    }
}


task putOnShoes{
    dependsOn "putOnSocks"
    doLast{
        println "Putting on Shoes"
    }
}

task eatBreakfast{
    finalizedBy "brushYourTeeth"
    doLast{
        println "Om nom breakfast!"
    }
}

task brushYourTeeth{
    doLast{
        println "Brushie Brushie Brushie"
    }
}


task takeShower{
    doLast{
        println "Taking a shower"
    }
}

task putOnFragrance{
    shouldRunAfter "takeShower"
    doLast{
        println "Smellin' fresh!"
    }
}

task getReady{
    dependsOn = ["takeShower","eatBreakfast","putOnShoes"]
    doLast{
        println "Finally Ready!"
    }
}

putOnShoes.mustRunAfter takeShower

task getEquipped{
    dependsOn tasks.matching {task -> task.name.startsWith("putOn")}
}

task copyPNGImages(type: Copy){
    from "images"
    into "build"
    include "*.png"
}

task copyJpegImages(type: Copy){
    from "images"
    into "build/jpg"
    include "*.jpg"
}

task zipImages(type:Zip){
    baseName='images'
    destinationDir = file('build')
    from 'images'
}

task zipImagesIntoDifferentFolders(type: Zip){
    baseName = 'images'
    destinationDir = file('build')
    from('images'){
        include '*.jpg'
        into 'jpeg'
    }
    from('images'){
        include '*.png'
        into 'png'
    }
}

task deleteBuild(type:Delete){
    delete 'build'
}

task printGreeting{
    doLast{
        println greeting
    }
}
ext{
    greeting = "Hello again"
}


class MyTypedTask extends DefaultTask{
    String firstName;
    @TaskAction
    void doAction(){
        println "Hello Wolrd from $firstName"
    }
}

task basedOnMyTypeTask(type:MyTypedTask){
    firstName "Lamine"

}


apply plugin: "java"

task execute(type:JavaExec){
    main = "com.udacity.gradle.Person"
    classpath=sourceSets.main.runtimeClasspath
}

repositories{
    mavenCentral()
    mavenLocal()
    flatDir{
        dirs 'libs'
    }
}

dependencies{
    compile 'com.google.guava:guava:18.0'
    compile group:'com.google.guava', name:'guava', version:'18.0'
    testCompile 'junit:junit:4.11'
}


